# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

executors:
  my-executor:
    docker:
      - image: cimg/node:16.10
commands:
  health_check:
      parameters:
        url:
          default: "."
          type: string
      steps:
        - run:
            name: Health check
            command: |
                    echo "doing health check" &&
                    status=`curl <<parameters.url>> -k -s -f -o /dev/null && echo "SUCCESS" || echo "ERROR"` &&   
                    [[ $status != "SUCCESS" ]] && { echo "Health check is not successful"; exit 1; } || echo " Health is good"
  install_deps:
    parameters:
      location:
        default: "."
        type: string
    steps:
      - run:
          name: "install deps <<parameters.location>>"
          command: |
                   cd <<parameters.location>> && npm ci && pwd

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7

jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  install_deps_frontend_and_functions:
    executor: my-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-npm-deps-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum "functions/package.json"}}-{{ checksum "functions/package-lock.json"}}
      #install at root directory for frontend
      - install_deps
      #install at functions directory for backend
      - install_deps:
          location: "functions"
      - save_cache:
          paths:
            - ~/.npm
          key: v1-npm-deps-{{ .Branch }}-{{ checksum "package.json" }}-{{ checksum "package-lock.json" }}-{{ checksum "functions/package.json"}}-{{ checksum "functions/package-lock.json"}}
      -  persist_to_workspace:
          root: ~/project
          paths:
            - .
  frontend_build_and_test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/node
    executor: my-executor
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Build Frontend
          command: npm run build && ls -lrt && pwd
      -  persist_to_workspace:
          root: ~/project
          paths:
            - .
  frontend_deploy:
    executor: my-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Deploy Frontend
          command: |
                    echo "using following project $PROJECT_ID" &&
                    ./node_modules/.bin/firebase use $PROJECT_ID --token $FIREBASE_DEPLOY_TOKEN &&
                    echo 'deploying' &&
                    ./node_modules/.bin/firebase deploy --only hosting --token $FIREBASE_DEPLOY_TOKEN || { echo "something went wrong & exiting" exit 1; }
      - health_check:
          url: https://${PROJECT_ID}.web.app
  functions_build_and_test:
    executor: my-executor
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    working_directory: functions
    steps:
      - attach_workspace:
          at: ~/project
      - run:
          name: Run tests
          command: pwd && ls -lrt
      - run:
          name: Build Functions
          command: npm run build && ls -lrt && pwd
      -  persist_to_workspace:
          root: ~/project
          paths:
            - .
  functions_deploy:
    executor: my-executor
    steps:
      - attach_workspace:
          at: ~/project
      - run:
            name: Deploy Functions
            command: |
                      echo "using following project $PROJECT_ID" &&
                      ./node_modules/.bin/firebase use $PROJECT_ID --token $FIREBASE_DEPLOY_TOKEN &&
                      echo 'deploying' &&
                      ./node_modules/.bin/firebase deploy --only functions --token $FIREBASE_DEPLOY_TOKEN || { echo "something went wrong & exiting" exit 1; }
      - health_check:
          url: https://us-central1-ci-cd-poc-e8e8a.cloudfunctions.net/helloWorld
workflows:
  # Below is the definition of your workflow.
  # Inside the workflow, you provide the jobs you want to run, e.g this workflow runs the build-and-test job above.
  # CircleCI will run this workflow on every commit.
  # For more details on extending your workflow, see the configuration docs: https://circleci.com/docs/2.0/configuration-reference/#workflows
  build_and_deploy:
    jobs:
      - install_deps_frontend_and_functions
      - frontend_build_and_test:
          requires:
            - install_deps_frontend_and_functions
      - functions_build_and_test:
          requires:
            - install_deps_frontend_and_functions
      - functions_deploy:
          requires:
            - functions_build_and_test
      - frontend_deploy:
          requires:
            - frontend_build_and_test # only deploy if the build_and_test job has completed
          filters:
            branches:
              only:
                - main
